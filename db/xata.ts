// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "classification_system",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.classification_system_enum",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "publication",
    checkConstraints: {},
    foreignKeys: {
      publication_researcher_id_researcher_id_fk: {
        name: "publication_researcher_id_researcher_id_fk",
        columns: ["researcher_id"],
        referencedTable: "researcher",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "abstract",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "doi",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "page_count",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "researcher_id",
        type: "link",
        link: { table: "researcher" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "type",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.publication_type",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "volume",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "year",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "publication_classification",
    checkConstraints: {},
    foreignKeys: {
      publication_classification_publication_id_publication_id_fk: {
        name: "publication_classification_publication_id_publication_id_fk",
        columns: ["publication_id"],
        referencedTable: "publication",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
      publication_classification_system_id_classification_system_id_f: {
        name: "publication_classification_system_id_classification_system_id_f",
        columns: ["system_id"],
        referencedTable: "classification_system",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: ["publication_id", "system_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "evidence_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "publication_id",
        type: "link",
        link: { table: "publication" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "rank",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "system_id",
        type: "link",
        link: { table: "classification_system" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "publication_venue",
    checkConstraints: {},
    foreignKeys: {
      publication_venue_publication_id_publication_id_fk: {
        name: "publication_venue_publication_id_publication_id_fk",
        columns: ["publication_id"],
        referencedTable: "publication",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
      publication_venue_venue_id_venue_id_fk: {
        name: "publication_venue_venue_id_venue_id_fk",
        columns: ["venue_id"],
        referencedTable: "venue",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: ["publication_id", "venue_id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "publication_id",
        type: "link",
        link: { table: "publication" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "venue_id",
        type: "link",
        link: { table: "venue" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "researcher",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      researcher_email_unique: {
        name: "researcher_email_unique",
        columns: ["email"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "dblp_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "diploma",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "email",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "full_name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "google_scholar_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "grade",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.research_grade",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "h_index",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "origin_institution",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "personal_website",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "phone",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "qualification",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.qualification",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "research_gate_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "status",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.researcher_status",
        notNull: false,
        unique: false,
        defaultValue:
          "'active'::bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.researcher_status",
        comment: "",
      },
      {
        name: "team",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user",
    checkConstraints: {},
    foreignKeys: {
      user_researcher_id_researcher_id_fk: {
        name: "user_researcher_id_researcher_id_fk",
        columns: ["researcher_id"],
        referencedTable: "researcher",
        referencedColumns: ["id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      user_email_unique: { name: "user_email_unique", columns: ["email"] },
    },
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "email",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "last_login",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "password",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "phone",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "researcher_id",
        type: "link",
        link: { table: "researcher" },
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "role",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.user_role",
        notNull: true,
        unique: false,
        defaultValue:
          "'researcher'::bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.user_role",
        comment: "",
      },
    ],
  },
  {
    name: "venue",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "end_date",
        type: "date",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "location",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "periodicity",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "scope",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "start_date",
        type: "date",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "theme",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "type",
        type: "bb_aqp3pm3rbh02r15m8fh3tjpppo_ub7vq9.venue_type",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type ClassificationSystem = InferredTypes["classification_system"];
export type ClassificationSystemRecord = ClassificationSystem & XataRecord;

export type Publication = InferredTypes["publication"];
export type PublicationRecord = Publication & XataRecord;

export type PublicationClassification =
  InferredTypes["publication_classification"];
export type PublicationClassificationRecord = PublicationClassification &
  XataRecord;

export type PublicationVenue = InferredTypes["publication_venue"];
export type PublicationVenueRecord = PublicationVenue & XataRecord;

export type Researcher = InferredTypes["researcher"];
export type ResearcherRecord = Researcher & XataRecord;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type Venue = InferredTypes["venue"];
export type VenueRecord = Venue & XataRecord;

export type DatabaseSchema = {
  classification_system: ClassificationSystemRecord;
  publication: PublicationRecord;
  publication_classification: PublicationClassificationRecord;
  publication_venue: PublicationVenueRecord;
  researcher: ResearcherRecord;
  user: UserRecord;
  venue: VenueRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Mahmoud-ABADA-s-workspace-ub7vq9.eu-central-1.xata.sh/db/lmcs-db",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
